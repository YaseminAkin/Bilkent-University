CS224
Recitation 3
Section 6
Yasemin AkÄ±n
22101782
31 March 2023

#PRELIM Q1-------------------------------------------------------------------------------
		.data
regNum_p:	.asciiz "Enter register number: "
outOfBounds_p:	.asciiz "There is no such register number."
regCount_p:	.asciiz "Register count = "

		.text
Main:

		la	$a0, regNum_p		
		li	$v0, 4
		syscall				#"Enter register number: "
    		li 	$v0, 5         
    		syscall           		#input register number in $v0
    		move 	$a0, $v0    		#input register number moved to $a0 to be passed as an argument to the RegisterCount function
    		blt 	$a0, 1, outOfBound	#checking if the input is in the wanted range [1, 31]
    		bgt	$a0, 31, outOfBound	#"There is no such register number."
    		la	$a1, RegisterCount	#$a1 contains the base address (starting address) of the function RegisterCount
    		li	$a2, 84			#$a2 contains the size of the subprogram
    		add	$a2, $a2, $a1		#$a2 contains the end address of the subprogram code
    		jal 	RegisterCount   
    		move 	$t0, $v0  		#the answer returned in return register $v0, we move the value to $t0 to print it
    		li 	$v0, 4         
    		la 	$a0, regCount_p		
    		syscall                		#"Register count = "
    		li 	$v0, 1         
    		move 	$a0, $t0     
    		syscall            		#printing the answer
    		li 	$v0, 10        
    		syscall      			#terminating the program
    		     
RegisterCount:
    		
    		li	$s0, 0			#initialize register number counter
    		
for1:						#loop through each instruction in the subprogram

    		bgt 	$a1, $a2, endAddress	#check if we have reached the end address ($a2)
    		lw 	$s1, 0($a1)		#read instruction from memory
    		#check rs, rd, and rt fields for the target register
    		
rs:

    		andi 	$s2, $s1, 0x03E00000  	#extract rs field
    		srl 	$s2, $s2, 21 	 	#shift rs field to the right
    		beq 	$s2, $a0, increment1  	#if rs field matches target register, increment counter

rt:

    		andi 	$s2, $s1, 0x001F0000  	#extract rt field
    		srl 	$s2, $s2, 16  		#shift rt field to the right
    		beq 	$s2, $a0, increment2  	#if rt field matches target register, increment counter

rd:

    		andi 	$s2, $s1, 0x0000F800  	#extract rd field
    		srl 	$s2, $s2, 11  		#shift rd field to the right
    		beq 	$s2, $a0, increment3  	#if rd field matches target register, increment counter

otherInstruction:

    		addi 	$a1, $a1, 4		#next instruction
    		j	for1
    
increment1:

    		addi 	$s0, $s0, 1  		#increment counter $s0
    		j 	rt	  		#continue to for1
    		
increment2:

    		addi 	$s0, $s0, 1  		#increment counter $s0
    		j 	rd	  		#continue to for1
    		
increment3:

		addi 	$s0, $s0, 1  		#increment counter $s0
    		j 	otherInstruction	#continue to for1
   	
endAddress:

		move	$v0, $s0
		jr 	$ra	
     		     		     
outOfBound:	
	
		la	$a0, outOfBounds_p
		li	$v0, 4
		syscall				#"There is no such register number."
    		li 	$v0, 10       
    		syscall 
#PRELIM Q2-------------------------------------------------------------------------------
		.data
dividend_p:	.asciiz "Enter dividend: "
divisor_p:	.asciiz "Enter divisor: "
negative_p:	.asciiz "Entered integer can not be negative! Quitting..."
zeroDivisor_p:	.asciiz "Divisor can not be zero! Quitting..."
quotient_p:	.asciiz "quotient = "
remainder_p:	.asciiz "\nremainder = "
		
		.text 
Main:

		la	$a0, dividend_p
		li	$v0, 4
		syscall				#"Enter dividend: "
		li 	$v0, 5         
    		syscall           
    		move 	$a1, $v0 		#Dividend in $a1
    		la	$a0, divisor_p		
		li	$v0, 4
		syscall				#"Enter divisor: "
		li 	$v0, 5         
    		syscall           
    		move 	$a2, $v0 		#Divisor in $a2
    		jal	recursiveDivision
    		move	$t0, $a0		#move quotient from returned value $v0 to $t0
    		move	$t1, $a1		#move remainder from returned value $a1 to $t1
    		la	$a0, quotient_p
		li	$v0, 4
		syscall				#"quotient = "
		move	$a0, $t0
		li 	$v0, 1
		syscall				#print quotient
		la	$a0, remainder_p	
		li	$v0, 4
		syscall				#"remainder = "
		move	$a0, $t1
		li 	$v0, 1
		syscall				#print remainder
    		li 	$v0, 10		
    		syscall				#terminating the program
   
negative:
	
		la	$a0, negative_p
		li	$v0, 4
		syscall				#"Entered integer can not be negative! Quitting..."
		li 	$v0, 10
    		syscall				#terminating the program

zeroDivisor:
	
		la	$a0, zeroDivisor_p
		li	$v0, 4
		syscall				#"Divisor can not be zero! Quitting..."
		li 	$v0, 10
    		syscall				#terminating the program

recursiveDivision:
#base cases
    		addi 	$sp, $sp, -4     	#allocate space for $ra register on the stack
    		sw   	$ra, 0($sp)       	#save return address on the stack
    		li   	$s0, 0            	#initialize quotient to 0 ($s0)
    		blt	$a1, 0, negative	#check for negativity (base case for our implementation of division)
    		blt	$a2, 0, negative	#check for negativity (base case for our implementation of division)
    		beq	$a2, 0, zeroDivisor	#check for zero divisor (true base case)
#recursively subtract the divisor from the dividend
    		
recurse:
#recursive case
    		sub  	$a1, $a1, $a2    	#subtract divisor from dividend
    		bgez 	$a1, increaseQuotient   #if dividend is non-negative, continue
    		add  	$a1, $a1, $a2  		#restore dividend (which is equal to final reminder)
    		j    	return               	#dividend is negative, exit recursion
    		
increaseQuotient:

    		addi 	$s0, $s0, 1       	#increment quotient
    		j    	recurse           	#continue recursion

return:

		move 	$a0, $s0        	#move quotient to return value $a0
		move	$a1, $a1		#move reminder to intended return value $a1
    		lw   	$ra, 0($sp)      	#restore return address
    		addi 	$sp, $sp, 4     	#deallocate space for $ra register on the stack
    		jr   	$ra             	#return
#PRELIM Q3-------------------------------------------------------------------------------
		.data
size_p:		.asciiz "Enter the size for linked list: "
value_p:	.asciiz "Enter integer value: "
start_s:	.asciiz "<"
end_s:		.asciiz ">"
space:		.asciiz ", "
ogList_p:	.asciiz "List before removal: "
afterList_p:	.asciiz "List after removal: "
removeEl_p:	.asciiz "\nEnter the number to be removed from the list above: "
sizeZero_p:	.asciiz "Size can not be zero or negative, enter another positive integer value: "

		.text
Main: 

		jal	createLinkedList
#Linked list is pointed by $v0
		move	$t0, $v0	#linked list address in $t0
		move	$t1, $v1	#size of the linked list is in $t1
		la	$a0, ogList_p
		li	$v0, 4
		syscall			#"List before removal: "
		move	$a0, $t0	#Pass the linked list address in $a0
		move	$a1, $t1	#size of the linked list is passed in $a1
		jal	printLinkedList
		move	$a0, $v0	#Pass the linked list address in $a0
		move	$a1, $v1	#size of the linked list is passed in $a1
		jal	CopyAllExcept_x
		move	$t0, $v0	#linked list address in $t0
		move	$t1, $v1	#size of the linked list is in $t1
		la	$a0, afterList_p
		li	$v0, 4
		syscall			#"List after removal: "
		move	$a0, $t0	#Pass the linked list address in $a0
		move	$a1, $t1	#size of the linked list is passed in $a1
		jal	printLinkedList
		li	$v0, 10
		syscall			#terminating the program

createLinkedList:
	
		la	$a0, size_p
		li	$v0, 4
		syscall			#"Enter the size for linked list: "
size:
		li	$v0, 5
		syscall
		ble	$v0, 0, sizeZero
		move 	$s0, $v0	#number of nodes to be created is in $s0 now	
		li	$s1, 1		#$s1: Node counter
#Create the first node: header.
#Each node is 8 bytes: link field then data field.
		li	$a0, 8		
		li	$v0, 9
		syscall			#(dynamically creating the node)
#OK now we have the list head. Save list head pointer 
		move	$s2, $v0	#$s2 points to the first and last node of the linked list.
		move	$s3, $v0	#$s3 now points to the list head.
		la	$a0, value_p
		li	$v0, 4
		syscall			#"Enter integer value: "
		li	$v0, 5
		syscall
		move	$s4, $v0
		sw	$s4, 4($s2)	#Store the data value.
	
add:

		beq	$s1, $s0, allDone	#No. of nodes created compared with the number of nodes to be created.
		addi	$s1, $s1, 1	#Increment node counter.
		li	$a0, 8 		#Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall

		sw	$v0, 0($s2)	#Connect the this node to the lst node pointed by $s2.
#Now make $s2 pointing to the newly created node.
		move	$s2, $v0	# $s2 now points to the new node.
		la	$a0, value_p
		li	$v0, 4
		syscall			#"Enter integer value: "
		li	$v0, 5
		syscall
		move	$s4, $v0
		sw	$s4, 4($s2)	#Store the data value.
		j	add
allDone:
#Make sure that the link field of the last node cotains 0.
#The last node is pointed by $s2.
		sw	$zero, 0($s2)
		move	$v0, $s3	#Now $v0 points to the list head ($s3).
		move	$v1, $s0
		jr	$ra
#=========================================================
printLinkedList:

		addi	$sp, $sp, -8
		sw	$a0, 0($sp)
		sw	$a1, 4($sp)
#$a0: points to the linked list.
		move 	$s0, $a0	#$s0: points to the current node.
		li	$s3, 0		#node counter: $s3
		la	$a0, start_s
		li	$v0, 4
		syscall			#Print "<"
		
		
printNextNode:
					#$s0: Address of current node
		lw	$s1, 0($s0)	#$s1: Address of next node
		lw	$s2, 4($s0)	#$s2: Data of current node
		addi	$s3, $s3, 1
		move	$a0, $s2	#$s2: Data of current node
		li	$v0, 1		
		syscall	
		bge	$s3, $a1, printedAll
		la	$a0, space
		li	$v0, 4
		syscall			#Print ", "
		
#Now consider next node.
		move	$s0, $s1	#Consider next node.
		j	printNextNode
		
printedAll:
#Restore the register values
		la	$a0, end_s
		li	$v0, 4
		syscall			#Print ">"
		lw	$v0, 0($sp)
		lw	$v1, 4($sp)
		addi	$sp, $sp, 8
		jr	$ra
		
CopyAllExcept_x:

    		move	$s7, $a0
		la	$a0, removeEl_p	
		li 	$v0, 4
		syscall
		li	$v0, 5
		syscall
		move	$s0, $v0	#$s0: element to be removed
		
    		
   		li 	$s1, 0          #Initialize a counter for the size of the new linked list
   		li	$a0, 8 		#Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall
		move	$s2, $v0	#Create a new node for the new linked list
		move	$s3, $v0	#$s3 is the head pointer of the new linked list
    
loop:

		beq	$s7, 0, end
		lw	$s6, 0($s7)	#$s6: points to the next node (pointing means containing the address of the pointed element!)	
    		lw 	$s4, 4($s7)	#Load the value of the current node
    		beq 	$s4, $s0, next	#Check if the value is the one to exclude, if yes move to the next node and do not copy it into the new list
    		sw 	$s4, 4($s2)     #Store the value in the new node
    		addi 	$s1, $s1, 1     #Increment the size counter
    		li	$a0, 8 		#Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall
		sw	$v0, 0($s2)	#Create a new node for the new linked list
		move	$s2, $v0	#point to the new node of the new linked list (=point next at the new list)
    
#since we manipulate two lists in this function, here we move forward in the OG list, above we move forward in the new list
next:
    		move 	$s7, $s6	#Move to the next node in the original linked list (same line can be written as: move	$s7, 0($s7) without using an extra register $s6 but it is a better practise to use!
    		j 	loop

end:

    		sw 	$zero, 0($s2)	#Set the next pointer of the last node to NULL
    		move 	$v0, $s3	#Return the base address of the new linked list
    		move 	$v1, $s1	#Return the size of the new linked list
    		jr	$ra

sizeZero:
		
		la	$a0, sizeZero_p
		li	$v0, 4
		syscall
		j	size
RECITATION Q1-------------------------------------------------------------------------------
		.data
deleteMult_p:	.asciiz "\nDeleting multiple entries from the above linked list...\n"
size_p:		.asciiz "Enter the size for linked list: "
value_p:	.asciiz "Enter integer value: "
start_s:	.asciiz "<"
end_s:		.asciiz ">"
space:		.asciiz ", "
ogList_p:	.asciiz "List before removal: "
afterList_p:	.asciiz "List after removal: "
sizeZero_p:	.asciiz "Size can not be zero or negative, enter another positive integer value: "
		
		.text
Main:
		
		jal	createLinkedList
#Linked list is pointed by $v0
		move	$t0, $v0	#linked list address in $t0
		move	$t1, $v1	#size of the linked list is in $t1
		la	$a0, ogList_p
		li	$v0, 4
		syscall			#"List before removal: "
		move	$a0, $t0	#Pass the linked list address in $a0
		move	$a1, $t1	#size of the linked list is passed in $a1
		jal	printLinkedList
		move	$a1, $v0
		move	$a2, $v1
		jal 	DeleteMultipleEntries
		move	$t0, $v0
		move	$t1, $v1
		la	$a0, afterList_p
		li	$v0, 4
		syscall			#"List after removal: "
		move	$a0, $t0	#Pass the linked list address in $a0
		move	$a1, $t1	#size of the linked list is passed in $a1
		jal	printLinkedList
		li	$v0, 10
		syscall			#terminating the program

DeleteMultipleEntries:
#$a1 passed as linked list's base address
#$a2 passed as linked list's size
#$v0 returned as changed linked list's base address
#v1 returned as changed linked list's size
		la	$a0, deleteMult_p
		li	$v0, 4
		syscall			#"Deleting multiple entries from the above linked list..."
		move	$s0, $a1	#$s0: points to the list head now 
		move	$s1, $a2	#$s1: points to the initial size of the list
		li	$s4, 1		#loop counter
		li	$s7, 1		#deletion counter
#if head node is going to be deleted from the list
deleteHead: 
		beq 	$a2, $s4, endL	#list is empty or end of the list
		addi	$s4, $s4, 1
		lw	$s2, 4($s0)
		lw	$s3, 12($s0)
		bne	$s2, $s3, nextN
		lw	$s0, 0($s0)
		move	$a1, $s0
		sub	$s1, $s1, 1
		j	deleteHead
		
deleteNext:

		beq 	$a2, $s4, endL	#end of the list
		addi	$s4, $s4, 1
		lw	$s2, 4($s0)
		lw	$s3, 12($s0)
		bne	$s2, $s3, nextN
		addi	$s1, $s1, -1
		lw	$s6, 0($s0)
		sw	$s6, 0($s5)
		j	nextND
		
nextN:
		li	$s7, 1
		move	$s5, $s0
		lw	$s0, 0($s0)
		j	deleteNext	

nextND:

		move	$s5, $s0
		mul	$t0, $s7, 8
		sub	$s5, $s5, $t0
		lw	$s0, 0($s0)
		addi	$s7, $s7, 1
		j	deleteNext
	
endL:

		move	$v0, $a1
		move	$v1, $s1
		jr	$ra	

createLinkedList:
	
		la	$a0, size_p
		li	$v0, 4
		syscall			#"Enter the size for linked list: "
size:
		li	$v0, 5
		syscall
		ble	$v0, 0, sizeZero
		move 	$s0, $v0	#number of nodes to be created is in $s0 now	
		li	$s1, 1		#$s1: Node counter
#Create the first node: header.
#Each node is 8 bytes: link field then data field.
		li	$a0, 8		
		li	$v0, 9
		syscall			#(dynamically creating the node)
#OK now we have the list head. Save list head pointer 
		move	$s2, $v0	#$s2 points to the first and last node of the linked list.
		move	$s3, $v0	#$s3 now points to the list head.
		la	$a0, value_p
		li	$v0, 4
		syscall			#"Enter integer value: "
		li	$v0, 5
		syscall
		move	$s4, $v0
		sw	$s4, 4($s2)	#Store the data value.
	
add:

		beq	$s1, $s0, allDone	#No. of nodes created compared with the number of nodes to be created.
		addi	$s1, $s1, 1	#Increment node counter.
		li	$a0, 8 		#Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall

		sw	$v0, 0($s2)	#Connect the this node to the lst node pointed by $s2.
#Now make $s2 pointing to the newly created node.
		move	$s2, $v0	# $s2 now points to the new node.
		la	$a0, value_p
		li	$v0, 4
		syscall			#"Enter integer value: "
		li	$v0, 5
		syscall
		move	$s4, $v0
		sw	$s4, 4($s2)	#Store the data value.
		j	add
allDone:
#Make sure that the link field of the last node cotains 0.
#The last node is pointed by $s2.
		sw	$zero, 0($s2)
		move	$v0, $s3	#Now $v0 points to the list head ($s3).
		move	$v1, $s0
		jr	$ra
#=========================================================
printLinkedList:

		addi	$sp, $sp, -8
		sw	$a0, 0($sp)
		sw	$a1, 4($sp)
#$a0: points to the linked list.
		move 	$s0, $a0	#$s0: points to the current node.
		li	$s3, 0		#node counter: $s3
		la	$a0, start_s
		li	$v0, 4
		syscall			#Print "<"
		
		
printNextNode:
					#$s0: Address of current node
		lw	$s1, 0($s0)	#$s1: Address of next node
		lw	$s2, 4($s0)	#$s2: Data of current node
		addi	$s3, $s3, 1
		move	$a0, $s2	#$s2: Data of current node
		li	$v0, 1		
		syscall	
		bge	$s3, $a1, printedAll
		la	$a0, space
		li	$v0, 4
		syscall			#Print ", "
		
#Now consider next node.
		move	$s0, $s1	#Consider next node.
		j	printNextNode
		
printedAll:
#Restore the register values
		la	$a0, end_s
		li	$v0, 4
		syscall			#Print ">"
		lw	$v0, 0($sp)
		lw	$v1, 4($sp)
		addi	$sp, $sp, 8
		jr	$ra
		
sizeZero:
		
		la	$a0, sizeZero_p
		li	$v0, 4
		syscall
		j	size
RECITATION Q2-------------------------------------------------------------------------------
		.data
size_p:		.asciiz "Enter the size for linked list: "
value_p:	.asciiz "Enter integer value: "
start_s:	.asciiz "<"
end_s:		.asciiz ">\n"
space:		.asciiz ", "
list_p:		.asciiz "List: "
sizeZero_p:	.asciiz "Size can not be zero or negative, enter another positive integer value: "
reverseList_p:	.asciiz "List printed in reverse order: "

		
		.text
Main: 

		jal	createLinkedList
#Linked list is pointed by $v0
		move	$t0, $v0	#linked list address in $t0
		move	$t1, $v1	#size of the linked list is in $t1
		la	$a0, list_p
		li	$v0, 4
		syscall			#"List before removal: "
		move	$a0, $t0	#Pass the linked list address in $a0
		move	$a1, $t1	#size of the linked list is passed in $a1
		jal	printLinkedList
		move	$a1, $v0	#Pass the linked list address in $a1
		move	$a2, $v1
		la	$a0, reverseList_p
		li	$v0, 4
		syscall
		jal	PrintInReverseOrder
		li	$v0, 10
		syscall			#terminating the program
		
PrintInReverseOrder:
#$a1 base address of the linked list
#$a2 size of the linked list
		addi 	$sp, $sp, -8 
		sw 	$a1, 0($sp)
		sw 	$ra, 4($sp) 
		li	$s0, 0
		bne 	$a1, 0, recurse 
#base-case
		addi 	$sp, $sp, 8 
		jr 	$ra 
		
recurse:

		lw 	$a1, 0($a1) 
		jal 	PrintInReverseOrder
		lw 	$a1, 0($sp)
		lw 	$ra, 4($sp) 
		addi 	$sp, $sp, 8 
		lw 	$a0, 4($a1) 
		li 	$v0, 1 
		syscall
		addi	$s0, $s0, 1
		beq	$a2, $s0, noSpace
		la 	$a0, space
		li 	$v0, 4
		syscall
noSpace:
		jr 	$ra             
		
createLinkedList:
	
		la	$a0, size_p
		li	$v0, 4
		syscall			#"Enter the size for linked list: "
size:
		li	$v0, 5
		syscall
		ble	$v0, 0, sizeZero
		move 	$s0, $v0	#number of nodes to be created is in $s0 now	
		li	$s1, 1		#$s1: Node counter
#Create the first node: header.
#Each node is 8 bytes: link field then data field.
		li	$a0, 8		
		li	$v0, 9
		syscall			#(dynamically creating the node)
#OK now we have the list head. Save list head pointer 
		move	$s2, $v0	#$s2 points to the first and last node of the linked list.
		move	$s3, $v0	#$s3 now points to the list head.
		la	$a0, value_p
		li	$v0, 4
		syscall			#"Enter integer value: "
		li	$v0, 5
		syscall
		move	$s4, $v0
		sw	$s4, 4($s2)	#Store the data value.
	
add:

		beq	$s1, $s0, allDone	#No. of nodes created compared with the number of nodes to be created.
		addi	$s1, $s1, 1	#Increment node counter.
		li	$a0, 8 		#Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall

		sw	$v0, 0($s2)	#Connect the this node to the lst node pointed by $s2.
#Now make $s2 pointing to the newly created node.
		move	$s2, $v0	# $s2 now points to the new node.
		la	$a0, value_p
		li	$v0, 4
		syscall			#"Enter integer value: "
		li	$v0, 5
		syscall
		move	$s4, $v0
		sw	$s4, 4($s2)	#Store the data value.
		j	add
allDone:
#Make sure that the link field of the last node cotains 0.
#The last node is pointed by $s2.
		sw	$zero, 0($s2)
		move	$v0, $s3	#Now $v0 points to the list head ($s3).
		move	$v1, $s0
		jr	$ra
#=========================================================
printLinkedList:

		addi	$sp, $sp, -8
		sw	$a0, 0($sp)
		sw	$a1, 4($sp)
#$a0: points to the linked list.
		move 	$s0, $a0	#$s0: points to the current node.
		li	$s3, 0		#node counter: $s3
		la	$a0, start_s
		li	$v0, 4
		syscall			#Print "<"
		
		
printNextNode:
					#$s0: Address of current node
		lw	$s1, 0($s0)	#$s1: Address of next node
		lw	$s2, 4($s0)	#$s2: Data of current node
		addi	$s3, $s3, 1
		move	$a0, $s2	#$s2: Data of current node
		li	$v0, 1		
		syscall	
		bge	$s3, $a1, printedAll
		la	$a0, space
		li	$v0, 4
		syscall			#Print ", "
		
#Now consider next node.
		move	$s0, $s1	#Consider next node.
		j	printNextNode
		
printedAll:
#Restore the register values
		la	$a0, end_s
		li	$v0, 4
		syscall			#Print ">"
		lw	$v0, 0($sp)
		lw	$v1, 4($sp)
		addi	$sp, $sp, 8
		jr	$ra
		
sizeZero:
		
		la	$a0, sizeZero_p
		li	$v0, 4
		syscall
		j	size
RECITATION Q3-------------------------------------------------------------------------------
		.data
size_p:		.asciiz "Enter the size for linked list: "
value_p:	.asciiz "Enter integer value: "
start_s:	.asciiz "<"
end_s:		.asciiz ">"
space:		.asciiz ", "
ogList_p:	.asciiz "List before: "
afterList_p:	.asciiz "\nList after: "
sizeZero_p:	.asciiz "Size can not be zero or negative, enter another positive integer value: "

		.text
Main: 

		jal	createLinkedList
#Linked list is pointed by $v0
		move	$t0, $v0	#linked list address in $t0
		move	$t1, $v1	#size of the linked list is in $t1
		la	$a0, ogList_p
		li	$v0, 4
		syscall			#"List before removal: "
		move	$a0, $t0	#Pass the linked list address in $a0
		move	$a1, $t1	#size of the linked list is passed in $a1
		jal	printLinkedList
		move	$a1, $v0	#Pass the linked list address in $a1
		move	$a2, $v1	#size of the linked list is passed in $a1
		jal	ReverseLinkedList
		move	$t0, $v0	#linked list address in $t0
		move	$t1, $v1	#size of the linked list is in $t1
		la	$a0, afterList_p
		li	$v0, 4
		syscall			#"List after removal: "
		move	$a0, $t0	#Pass the linked list address in $a0
		move	$a1, $t1	#size of the linked list is passed in $a1
		jal	printLinkedList
		li	$v0, 10
		syscall			#terminating the program
		
ReverseLinkedList:

		addi 	$sp, $sp, -4
		sw	$ra, 0($sp)
		sw 	$s0, 0($a1)
		beq	$s0, 0, end
		jal 	ReverseLinkedList
		move	$s1, $s0
		sw	$s0, 0($s0)
		move	$s0, $a1
		sw	$zero, 0($s1)
		
end:

		move	$v0, $a1
		lw	$ra, 0($sp)
		addi	$sp, $sp, 4
		jr	$ra

createLinkedList:
	
		la	$a0, size_p
		li	$v0, 4
		syscall			#"Enter the size for linked list: "
size:
		li	$v0, 5
		syscall
		ble	$v0, 0, sizeZero
		move 	$s0, $v0	#number of nodes to be created is in $s0 now	
		li	$s1, 1		#$s1: Node counter
#Create the first node: header.
#Each node is 8 bytes: link field then data field.
		li	$a0, 8		
		li	$v0, 9
		syscall			#(dynamically creating the node)
#OK now we have the list head. Save list head pointer 
		move	$s2, $v0	#$s2 points to the first and last node of the linked list.
		move	$s3, $v0	#$s3 now points to the list head.
		la	$a0, value_p
		li	$v0, 4
		syscall			#"Enter integer value: "
		li	$v0, 5
		syscall
		move	$s4, $v0
		sw	$s4, 4($s2)	#Store the data value.
	
add:

		beq	$s1, $s0, allDone	#No. of nodes created compared with the number of nodes to be created.
		addi	$s1, $s1, 1	#Increment node counter.
		li	$a0, 8 		#Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall

		sw	$v0, 0($s2)	#Connect the this node to the lst node pointed by $s2.
#Now make $s2 pointing to the newly created node.
		move	$s2, $v0	# $s2 now points to the new node.
		la	$a0, value_p
		li	$v0, 4
		syscall			#"Enter integer value: "
		li	$v0, 5
		syscall
		move	$s4, $v0
		sw	$s4, 4($s2)	#Store the data value.
		j	add
allDone:
#Make sure that the link field of the last node cotains 0.
#The last node is pointed by $s2.
		sw	$zero, 0($s2)
		move	$v0, $s3	#Now $v0 points to the list head ($s3).
		move	$v1, $s0
		jr	$ra
#=========================================================
printLinkedList:

		addi	$sp, $sp, -8
		sw	$a0, 0($sp)
		sw	$a1, 4($sp)
#$a0: points to the linked list.
		move 	$s0, $a0	#$s0: points to the current node.
		li	$s3, 0		#node counter: $s3
		la	$a0, start_s
		li	$v0, 4
		syscall			#Print "<"
		
		
printNextNode:
					#$s0: Address of current node
		lw	$s1, 0($s0)	#$s1: Address of next node
		lw	$s2, 4($s0)	#$s2: Data of current node
		addi	$s3, $s3, 1
		move	$a0, $s2	#$s2: Data of current node
		li	$v0, 1		
		syscall	
		bge	$s3, $a1, printedAll
		la	$a0, space
		li	$v0, 4
		syscall			#Print ", "
		
#Now consider next node.
		move	$s0, $s1	#Consider next node.
		j	printNextNode
		
printedAll:
#Restore the register values
		la	$a0, end_s
		li	$v0, 4
		syscall			#Print ">"
		lw	$v0, 0($sp)
		lw	$v1, 4($sp)
		addi	$sp, $sp, 8
		jr	$ra
	
sizeZero:
		
		la	$a0, sizeZero_p
		li	$v0, 4
		syscall
		j	size