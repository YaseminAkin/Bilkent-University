#CS224
#Recitation No. 1
#Section No. 6
#Yasemin Akın
#22101782
#3 March 2023

#Program1
##
## Program1.asm - prints out "hello world"
##
##	a0 - points to the string
##

#################################
#					 	#
#		text segment		#
#						#
#CS224
#Recitation No. 1
#Section No. 6
#Yasemin Akın
#22101782
#27 February 2023
#################################

	.text		
	.globl __start 

__start:		# execution starts here
	la $a0,str	# put string address into a0
	li $v0,4	# system call to print
	syscall		#   out a string

	li $v0,10  # system call to exit
	syscall	#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
str:	.asciiz "Hello <Sanaz Gheibun>"
n:	.word	10

##
## end of file Program1.asm

#Program2
##
## Program2.asm asks user for temperature in Celsius,
##  converts to Fahrenheit, prints the result.
##
##	v0 - reads in Celsius
##	t0 - holds Fahrenheit result
##	a0 - points to output strings
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start	

__start:
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	mul $t0,$v0,9	# to convert,multiply by 9,
	div $t0,$t0,5	# divide by 5, then
	add $t0,$t0,32	# add 32

	la $a0,ans1	# print string before result
	li $v0,4
	syscall

	move $a0,$t0	# print integer result
	li $v0,1		# using syscall 1
	syscall

	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall

	li $v0,10		# system call to exit
	syscall		#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
prompt:	.asciiz "Enter temperature (Celsius): "
ans1:	.asciiz "The temperature in Fahrenheit is "
endl:	.asciiz "\n"

##
## end of file Program2.asm

#Program3
##
##	Program3.asm is a loop implementation
##	of the Fibonacci function
##        

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
.globl __start
 
__start:		# execution starts here
	li $a0,4	# to calculate fib(7)
	jal fib		# call fib
	move $a0,$v0	# print result
	li $v0, 1
	syscall

	la $a0,endl	# print newline
	li $v0,4
	syscall

	li $v0,10
	syscall		# bye bye

#------------------------------------------------


fib:	move $v0,$a0	# initialise last element
	blt $a0,1,done	# fib(0)=0, fib(1)=1

	li $t0,0	# second last element
	li $v0,1	# last element

loop:	add $t1,$t0,$v0	# get next value
	move $t0,$v0	# update second last
	move $v0,$t1	# update last element
	sub $a0,$a0,1	# decrement count
	bgt $a0,1,loop	# exit loop when count=0
done:	jr $ra

#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
endl:	.asciiz "\n"

##
## end of Program3.asm

#Part 3 - Math
			.data 

enterOperandA: 	.asciiz "enter operand a: "
enterOperandB: 	.asciiz "enter operand b: "
enterOperandC: 	.asciiz "enter operand c: "
result:		.asciiz "result is: "
divisorZero:	.asciiz "divisor can not be 0!"

		.text
main:
#promt user to enter a
		li	$v0, 4		#printing a string
		la 	$a0, enterOperandA
		syscall
#get int input to be used as a
		li	$v0, 5		#reading integer
		syscall
		move	$t1, $v0	#saving integer input a to $t1 = a
#promt user to enter b
		li	$v0, 4		#printing a string
		la 	$a0, enterOperandB
		syscall
#get int input to be used as b
		li	$v0, 5		#reading integer
		syscall
		move	$t2, $v0	#saving integer input a to $t2 = b
#promt user to enter c
		li	$v0, 4		#printing a string
		la 	$a0, enterOperandC
		syscall
#get int input to be used as c
		li	$v0, 5		#reading integer
		syscall
		move	$t3, $v0	#saving integer input a to $t3 = c
		
		
		
		jal evaluate
		beq 	$t1, 0, zero
		
#promt user the answer
		li	$v0, 4		#printing a string
		la 	$a0, result
		syscall
		
		li	$v0, 3
		mov.d  	$f12, $f0
		syscall
#exit the program
		li	$v0, 10
		syscall
		
zero:
#promt user the divZero promt
		li	$v0, 4		#printing a string
		la 	$a0, divisorZero
		syscall
		
#exit the program
		li	$v0, 10
		syscall


evaluate:
		mult  	$t1, $t2
		mflo 	$t4		#a x b in $t4
		add 	$t2, $t1, $t2	#a + b in $t2
		sub	$t2, $t4, $t2	#dividend in $t2
		rem   	$t1, $t1, $t3	#a mod c in $t1 (divisor)
		beq 	$t1, 0, done
		
		
		mtc1  	$t1, $f2
		cvt.d.w $f2, $f2
		mtc1 	$t2, $f4
		cvt.d.w $f4, $f4
		
		div.d 	$f0, $f4, $f2	
done:		
		
		jr 	$ra
