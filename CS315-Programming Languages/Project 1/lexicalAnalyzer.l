DIGIT [0-9]
LETTER [A-Za-z]
EQUALSIGN =
PLUS \+
MINUS \-
MULTIPLICATIONOPERATOR \*
DIVISIONOPERATOR \/
MODULAOPERATOR %
EXPONENTOPERATOR \^
LEFTPARANTHESIS \(
RIGHTPARANTHESIS \)
COMMA ,
LEFTCURLYBRACE \{
RIGHTCURLYBRACE \}
SEMICOLON \;
LEFTSQUAREBRACKET \[
RIGHTSQUAREBRACKET \]
LESSTHAN <
BIGGERTHAN >
LESSTHANOREQUALTO <=
BIGGERTHANOREQUALTO >=
EQUALTO ==
NOTEQUALTO !=
NOT !
AND \&\&
OR \|\|
VARTYPE int
IF if
THEN then
ELSE else
ELSEIF elseif
WHILE while
FOR for
DO do
INPUT input
OUTPUT output
FUNCTION function
RETURNS returns
PUT put
PROMPT prompt
CONST const
RETURNTYPE void|intreturn
DIGITS ({DIGIT})+
INTEGER [+-]?{DIGITS}
PUNCTUATION [.,?:-]
DOUBLEQUOTATIONMARK \"
STRINGCHARACTER {LETTER}|{DIGIT}|{PUNCTUATION}
STRING {DOUBLEQUOTATIONMARK}(STRINGCHARACTER)*{DOUBLEQUOTATIONMARK}
LETTERS ({LETTER})+
IDENTIFIER {LETTERS}
HASHTAG #
COMMENTSTART "/\*"
COMMENTEND "\*/"
NEWLINE \n
SINGLELINECOMMENT {HASHTAG}({STRINGCHARACTER}|{NEWLINE})* 
MULTILINECOMMENT {COMMENTSTART}({STRINGCHARACTER}|{NEWLINE})*{COMMENTEND}
%%
{EQUALSIGN} printf("<EQUALSIGN>");
{PLUS} printf("<PLUS>");
{MINUS} printf("<MINUS>");
{MULTIPLICATIONOPERATOR} printf("<MULTIPLICATIONOPERATOR>");
{DIVISIONOPERATOR} printf("<DIVISIONOPERATOR>");
{MODULAOPERATOR} printf("<MODULAOPERATOR>");
{EXPONENTOPERATOR} printf("<EXPONENTOPERATOR>");
{LEFTPARANTHESIS} printf("<LEFTPARANTHESIS>");
{RIGHTPARANTHESIS} printf("<RIGHTPARANTHESIS>");
{COMMA} printf("<COMMA>");
{LEFTCURLYBRACE} printf("<LEFTCURLYBRACE>");
{RIGHTCURLYBRACE} printf("<RIGHTCURLYBRACE>");
{SEMICOLON} printf("<SEMICOLON>");
{LEFTSQUAREBRACKET} printf("<LEFTSQUAREBRACKET>");
{RIGHTSQUAREBRACKET} printf("<RIGHTSQUAREBRACKET>");
{LESSTHAN} printf("<LESSTHAN>");
{BIGGERTHAN} printf("<BIGGERTHAN>");
{LESSTHANOREQUALTO} printf("<LESSTHANOREQUALTO>");
{BIGGERTHANOREQUALTO} printf("<BIGGERTHANOREQUALTO>");
{EQUALTO} printf("<EQUALTO>");
{NOTEQUALTO} printf("<NOTEQUALTO>");
{NOT} printf("<NOT>");
{AND} printf("<AND>");
{OR} printf("<OR>");
{VARTYPE} printf("<VARTYPE>");
{IF} printf("<IF>");
{THEN} printf("<THEN>");
{ELSE} printf("<ELSE>");
{ELSEIF} printf("<ELSEIF>");
{WHILE} printf("<WHILE>");
{FOR} printf("<FOR>");
{DO} printf("<DO>");
{INPUT} printf("<INPUT>");
{OUTPUT} printf("<OUTPUT>");
{FUNCTION} printf("<FUNCTION>");
{RETURNS} printf("<RETURNS>");
{PUT} printf("<PUT>");
{PROMPT} printf("<PROMPT>");
{CONST} printf("<CONST>");
{RETURNTYPE} printf("<RETURNTYPE>");
{INTEGER} printf("<INTEGER>");
{STRING} printf("<STRING>");
{IDENTIFIER} printf("<IDENTIFIER>");
{COMMENT} printf("<COMMENT>");
{SINGLELINECOMMENT} printf("<SINGLELINECOMMENT>");
{MULTILINECOMMENT} printf("<MULTILINECOMMENT>");

%%
int yywrap(void) {
    return 1;
}

int main(void) {
    yylex();
    return 0;
}
